     using System; using System.ComponentModel; using System.Collections.Generic; using System.Diagnostics; using System.Text; using System.Windows; using System.Windows.Controls; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Shapes; using System.Collections.ObjectModel; using Telerik.Windows.Controls;  namespace EasyPaint.ViewModels {     public class HierarchicalDataViewModel : ViewModelBase     {         private ObservableCollection<CharacterViewModel> _characters;          /// <summary>         /// Initializes the items.         /// </summary>         private void InitializeItems()         {             this._characters = new ObservableCollection<CharacterViewModel>();             for (int i = 1; i <= 4; i++)             {                 CharacterViewModel newItem = new CharacterViewModel(string.Format("Collection {0}", i),                      string.Format("Detailed information for collection {0}", i));                 this._characters.Add(newItem);             }         }          /// <summary>         /// A collection for <see cref="PicsViewModel"/> objects.         /// </summary>         public ObservableCollection<CharacterViewModel> Items         {             get             {                 if (this._characters == null)                 {                     this.InitializeItems();                 }                 return this._characters;             }             private set             {                 this._characters = value;             }         }     }      public class CharacterViewModel : ViewModelBase     {         private ObservableCollection<PicsViewModel> _pics;         private string title;         private string information;          public CharacterViewModel(string title, string information = null)         {             this.title = title;             this.information = information;             this.InitializePics();         }          /// <summary>         /// Gets or sets the title of the collection.         /// </summary>         public string Title         {             get             {                 return this.title;             }             private set             {                 if (this.title != value)                 {                     this.title = value;                     this.OnPropertyChanged("Title");                 }             }         }          /// <summary>         /// Gets or sets the information for the collection.         /// </summary>         public string Information         {             get             {                 return this.information;             }             private set             {                 if (this.information != value)                 {                     this.information = value;                     this.OnPropertyChanged("Information");                 }             }         }          /// <summary>         /// A collection for <see cref="PicsViewModel"/> objects.         /// </summary>         public ObservableCollection<PicsViewModel> Pics         {             get             {                 return this._pics;             }             private set             {                 this._pics = value;             }         }          /// <summary>         /// Initializes the items.         /// </summary>         private void InitializePics()         {             this._pics = new ObservableCollection<PicsViewModel>();             for (int i = 1; i <= 3; i++)             {                 this._pics.Add(new PicsViewModel()                 {                     ImageSource = new Uri("Images/Frame.png", UriKind.RelativeOrAbsolute),                     ImageThumbnailSource = new Uri("Images/FrameThumbnail.png", UriKind.RelativeOrAbsolute),                     Title = "Title " + i,                     Information = "Information " + i,                     Group = (i % 2 == 0) ? "EVEN" : "ODD"                 });             }         }     } } 